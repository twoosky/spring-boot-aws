# 실제로 실행된 쿼리를 로그로 보기 위한 설정
spring.jpa.show_sql=true

# 출력되는 쿼리 로그를 MySQL 버전으로 변경하기 위한 설정
# 참고: https://github.com/jojoldu/freelec-springboot2-webservice/issues/67
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect
spring.jpa.properties.hibernate.dialect.storage_engine=innodb
spring.datasource.hikari.jdbc-url=jdbc:h2:mem://localhost/~/testdb;MODE=MYSQL

# h2 데이터베이스 사용
# main 메소드 실행 후 http://localhost:8080/h2-console 로 접속하면 h2 콘솔화면 뜸
spring.h2.console.enabled=true
# 아래 추가하여 h2 connect 오류 해결
spring.datasource.hikari.jdbc-url=jdbc:h2:mem:testdb;MODE=MYSQL

#spring boot에서는 properties의 이름을 application-xxx.properties로 만들면 xxx라는 이름의 profile이 생성되어 이를 통해 관리할 수 있다.
# 즉, profile=xxx라는 식으로 호출하면 해당 properties의 설정들을 가져올 수 있다.
# 아래는 스프링 부트의 기본 설정 파일 application.properties에서 application-oauth.properties를 포함하도록 하는 코드
spring.profiles.include=oauth

# 데이터베이스를 등록하지 않은 경우, 내장 톰캣 사용 경우 문제점
# 1. 애플리케이션 재실행 시 로그인 풀림 - 세션이 내장 톰캣의 메모리에 저장되기 때문, 내장 톰캣은 애플리케이션 실행시 항상 초기화 된다.
# 2. 2대 이상의 서버에서 서비스하고 있다면 톰캣마다 세션 동기화 설정을 해야 한다.
# 실제 현업에서는 MySQL과 같은 데이터베이스 세션 저장소로 사용 / Redis, Memcached와 같은 메모리 DB를 세션 저장소로 사용(실제 서비스)
# 세션 저장소를 jdbc로 선택하도록 코드 추가
# 결과: h2-console 보면 JPA로 인해 세션을 위한 테이블 2개가 자동 생성됨.
# - 현재는 h2 기반이므로 스프링을 재시작하면 세션 풀림 -> 추후, AWS에서 RDS를 사용해 배포하면 세션 풀리지 않음
spirng.session.store-type=jdbc